#!/bin/bash
# Function to start docker service, check its status, and execute docker compose with given profile
COMPOSE_FILE="/home/hpe/docker-sap-hana-deploy/ansible/compose.yml" 

start_docker_compose() {
    profile=$1

    if [ "$profile" = "redhat" ] || [ "$profile" = "suse" ]; then
      ensure_service_running "docker"
      ensure_service_running "nfs-kernel-server"

      echo "Docker & nfs-kernel-server services are running..."
      #Check Docker Compose Service
      container_ids=$(docker compose --file "$COMPOSE_FILE" ps --services "$profile-ansible" -q )
      if [ ! "$container_ids" ]; then
	 echo ""
         echo "Executing 'docker compose --file $COMPOSE_FILE --profile $profile up -d'..."
         docker compose --file $COMPOSE_FILE --profile $profile up -d
         echo "Docker Compose $profile services have been started."
         echo ""
         show_docker_compose_status
         echo ""
      else
         echo "Docker Compose $profile services already running...."
         fi
    else
       echo "Invalid argument. Usage: appliance start [redhat|suse]"
       exit 1
    fi

}

stop_docker_compose() {
    profile=$1

    if [ "$profile" = "redhat" ] || [ "$profile" = "suse" ]; then
         #Check Docker Compose Service
         container_ids=$(docker compose --file "$COMPOSE_FILE" ps --services "$profile-ansible" -q )  

         if [ "$container_ids" ]; then
            read -p "Are you sure you want to stop Docker Compose services for $profile? (y/n) " choice
	    case "$choice" in
                y|Y )
                   echo "Stopping $1 Docker Compose services..."
	           docker compose --file $COMPOSE_FILE --profile $profile down
                   echo ""
                   echo "Docker Compose $profile services have been stopped..."
                   if is_service_running nfs-kernel-server; then
                    sudo systemctl stop nfs-kernel-server
                    echo "nfs-kernel-server service has been stopped..."
	           fi
               ;;
               n|N )
                 echo "Stop operation cancelled."
                 return  # Exit the function
               ;;
               * )
                 echo "Invalid input"
               ;;
            esac
	 else
             echo "Docker Compose $profile services not running...."
           fi   
       else
           echo "Invalid argument. Usage: appliance stop [redhat|suse]"
	   exit 1
       fi
}

connect_docker_compose() {
    profile=$1

    if [ "$profile" = "redhat" ] || [ "$profile" = "suse" ]; then
	#Check Docker Compose Service
        container_ids=$(docker compose --file "$COMPOSE_FILE" ps --services "$profile-ansible" -q )

        if [ "$container_ids" ]; then
           case "$profile" in
               "redhat")
                   echo "Connecting Redhat Docker Compose services..."
                   docker exec -it ansible-rhel /bin/bash
                   ;;
               "suse")
                   echo "Connecting Suse Docker Compose services..."
                   docker exec -it ansible-sles /bin/bash
                   ;;
           esac
        else
             echo "Docker Compose $profile services not running...."
           fi
    else
        echo "Invalid argument. Usage: appliance connect [redhat|suse]"
	exit 1
    fi
}

# Function to show Docker Compose status
show_docker_compose_status() {
    echo "Docker Compose Service Status..."
    #docker compose --file $COMPOSE_FILE ps --all
    docker compose --file $COMPOSE_FILE ps --format "table {{.Name}}\t{{.Service}}\t{{.CreatedAt}}\t{{.Status}}\t{{.Ports}}"
}

# Helper function for cleaner service checks
is_service_running() {
    [[ $(sudo systemctl is-active $1) == "active" ]]
}

ensure_service_running() {
    if ! is_service_running "$1"; then
        echo "Starting $1..."
        sudo systemctl start "$1" 
        if ! is_service_running "$1"; then
            echo "Failed to start $1. Exiting."
            exit 1
        fi
    fi
}

cleanup_on_exit() {
  echo "Script terminated. Performing cleanup..."
  docker-compose --file "$COMPOSE_FILE" --profile $profile down
  if is_service_running "nfs-kernel-server"; then
     sudo systemctl stop nfs-kernel-server
  fi
}

display_help() {
    echo "Usage: appliance action [redhat|suse]"
    echo "action:"
    echo "    start   Start Docker Compose Services For the Given Profile."
    echo "    stop    Stop Docker Compose Services For the Given Profile."
    echo "    connect Connect Docker Compose Services For the Given Profile."
    echo "    status  Show Docker Compose Status."
    echo "    help    Display Help Message."
    echo "profile:"
    echo "    redhat  Start/Stop Docker Redhat Compose services."
    echo "    suse    Start/Stop Docker Suse Compose services."
}

trap cleanup_on_exit SIGINT SIGTERM

# Check if a specific function is provided as a command line argument
if [ $# -eq 2 ]; then
    ACTION=$1
    PROFILE=$2
    case "$ACTION" in
        "start")
            start_docker_compose $PROFILE
            ;;
        "stop")
            stop_docker_compose $PROFILE
            ;;
	"connect")
            connect_docker_compose $PROFILE
            ;;
        *)
            echo "Invalid action..."
	    echo ""
	    display_help
            ;;
    esac
elif [ $# -eq 1 ]; then
    ACTION=$1
    case "$ACTION" in
        "status")
            show_docker_compose_status
            ;;
        "help")
            display_help
            ;;
        *)
            echo "Invalid action..."
            echo ""
            display_help
            ;;
    esac
elif [ $# -eq 0 ]; then
    echo "Missing arguments."
    display_help
else
    echo "Invalid action..."
    echo ""
    display_help
fi

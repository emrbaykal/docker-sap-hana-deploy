---
# Configure Local Mount Points

- name: Append lvm.conf Filter
  blockinfile:
    dest: /etc/lvm/lvm.conf
    marker: "## {mark} ANSIBLE CONFIG Multipath lvm config"
    block: |
      filter = [ "a|^{{ OS_Partition }}$|", "a|^{{ hana_data_disks.partition }}$|" ,"a|^{{ hana_shared_disks.partition }}$|" ,"a|^{{ hana_log_disks.partition }}$|" ,"a|^{{ hana_usr_sap_disks.partition }}$|" ,"r|.*/|" ]
    insertbefore: "\t# Configuration option devices/types."
  register: lvm

- name: Run dracut -f --verbose command to generate initramfs
  command: dracut -f --verbose
  when: lvm.changed

- name: Create a volume group on top of {{ hana_data_disks['partition'] }}
  lvg:
    vg: "{{ hana_data_disks['volume_group'] }}"
    pvs: "{{ hana_data_disks['partition'] }}"

- name: Create a volume group on top of {{ hana_shared_disks['partition'] }}
  lvg:
    vg: "{{ hana_shared_disks['volume_group'] }}"
    pvs: "{{ hana_shared_disks['partition'] }}"

- name: Create a volume group on top of {{ hana_log_disks['partition'] }}
  lvg:
    vg: "{{ hana_log_disks['volume_group'] }}"
    pvs: "{{ hana_log_disks['partition'] }}"

- name: Create a volume group on top of {{ hana_usr_sap_disks['partition'] }}
  lvg:
    vg: "{{ hana_usr_sap_disks['volume_group'] }}"
    pvs: "{{ hana_usr_sap_disks['partition'] }}"

- name: Create a lv_hana_shared logical volume
  lvol:
    vg: "{{ hanavols['hana_shared']['vol'] }}"
    lv: "{{ hanavols['hana_shared']['lv'] }}"
    size: "{{ hanavols['hana_shared']['size'] }}"

- name: Create lv_hana_shared File System
  filesystem:
    fstype: "{{ hanavols['hana_shared']['fs_type'] }}"
    dev: "/dev/{{ hanavols['hana_shared']['vol'] }}/{{ hanavols['hana_shared']['lv'] }}"

- name: Set /hana/shared Mount Points
  mount:
    path: "{{ hanavols['hana_shared']['mountpoint'] }}"
    src: "/dev/{{ hanavols['hana_shared']['vol'] }}/{{ hanavols['hana_shared']['lv'] }}"
    fstype: "{{ hanavols['hana_shared']['fs_type'] }}"
    state: mounted

- name: Create a lv_hana_data logical volume
  lvol:
    vg: "{{ hanavols['hana_data']['vol'] }}"
    lv: "{{ hanavols['hana_data']['lv'] }}"
    size: "{{ hanavols['hana_data']['size'] }}"

- name: Create lv_hana_data File System
  filesystem:
   fstype: "{{ hanavols['hana_data']['fs_type'] }}"
   dev: "/dev/{{ hanavols['hana_data']['vol'] }}/{{ hanavols['hana_data']['lv'] }}"

- name: Set /hana/data Mount Points
  mount:
    path: "{{ hanavols['hana_data']['mountpoint'] }}"
    src: "/dev/{{ hanavols['hana_data']['vol'] }}/{{ hanavols['hana_data']['lv'] }}"
    fstype: "{{ hanavols['hana_data']['fs_type'] }}"
    state: mounted

- name: Create a lv_hana_logs logical volume
  lvol:
    vg: "{{ hanavols['hana_logs']['vol'] }}"
    lv: "{{ hanavols['hana_logs']['lv'] }}"
    size: "{{ hanavols['hana_logs']['size'] }}"

- name: Create lv_hana_logs File System
  filesystem:
    fstype: "{{ hanavols['hana_logs']['fs_type'] }}"
    dev: "/dev/{{ hanavols['hana_logs']['vol'] }}/{{ hanavols['hana_logs']['lv'] }}"

- name: Set /hana/logs Mount Points
  mount:
    path: "{{ hanavols['hana_logs']['mountpoint'] }}"
    src: "/dev/{{ hanavols['hana_logs']['vol'] }}/{{ hanavols['hana_logs']['lv'] }}"
    fstype: "{{ hanavols['hana_logs']['fs_type'] }}"
    state: mounted

- name: Create a lv_hana_usr_sap logical volume
  lvol:
    vg: "{{ hanavols['usr_sap']['vol'] }}"
    lv: "{{ hanavols['usr_sap']['lv'] }}"
    size: "{{ hanavols['usr_sap']['size'] }}"

- name: Create lv_hana_usr_sap File System
  filesystem:
    fstype: "{{ hanavols['usr_sap']['fs_type'] }}"
    dev: "/dev/{{ hanavols['usr_sap']['vol'] }}/{{ hanavols['usr_sap']['lv'] }}"

- name: Set /usr/sap Mount Points
  mount:
    path: "{{ hanavols['usr_sap']['mountpoint'] }}"
    src: "/dev/{{ hanavols['usr_sap']['vol'] }}/{{ hanavols['usr_sap']['lv'] }}"
    fstype: "{{ hanavols['usr_sap']['fs_type'] }}"
    state: mounted

